/*
 * api_java_gfvcorp API
 * api_java_gfvcorp API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.Modal;
import org.openapitools.client.model.Vehicle;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Protocol
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-13T13:06:09.898871600-03:00[America/Sao_Paulo]")
public class Protocol {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private String protocol;

  public static final String SERIALIZED_NAME_DATE_TRIGGERED = "dateTriggered";
  @SerializedName(SERIALIZED_NAME_DATE_TRIGGERED)
  private OffsetDateTime dateTriggered;

  public static final String SERIALIZED_NAME_CLIENT = "client";
  @SerializedName(SERIALIZED_NAME_CLIENT)
  private Client client;

  public static final String SERIALIZED_NAME_VEHICLE = "vehicle";
  @SerializedName(SERIALIZED_NAME_VEHICLE)
  private Vehicle vehicle;

  public static final String SERIALIZED_NAME_MODALS = "modals";
  @SerializedName(SERIALIZED_NAME_MODALS)
  private List<Modal> modals = null;

  public Protocol() {
  }

  public Protocol id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public Protocol protocol(String protocol) {
    
    this.protocol = protocol;
    return this;
  }

   /**
   * Get protocol
   * @return protocol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getProtocol() {
    return protocol;
  }


  public void setProtocol(String protocol) {
    this.protocol = protocol;
  }


  public Protocol dateTriggered(OffsetDateTime dateTriggered) {
    
    this.dateTriggered = dateTriggered;
    return this;
  }

   /**
   * Get dateTriggered
   * @return dateTriggered
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateTriggered() {
    return dateTriggered;
  }


  public void setDateTriggered(OffsetDateTime dateTriggered) {
    this.dateTriggered = dateTriggered;
  }


  public Protocol client(Client client) {
    
    this.client = client;
    return this;
  }

   /**
   * Get client
   * @return client
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Client getClient() {
    return client;
  }


  public void setClient(Client client) {
    this.client = client;
  }


  public Protocol vehicle(Vehicle vehicle) {
    
    this.vehicle = vehicle;
    return this;
  }

   /**
   * Get vehicle
   * @return vehicle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Vehicle getVehicle() {
    return vehicle;
  }


  public void setVehicle(Vehicle vehicle) {
    this.vehicle = vehicle;
  }


  public Protocol modals(List<Modal> modals) {
    
    this.modals = modals;
    return this;
  }

  public Protocol addModalsItem(Modal modalsItem) {
    if (this.modals == null) {
      this.modals = new ArrayList<>();
    }
    this.modals.add(modalsItem);
    return this;
  }

   /**
   * Get modals
   * @return modals
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Modal> getModals() {
    return modals;
  }


  public void setModals(List<Modal> modals) {
    this.modals = modals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Protocol protocol = (Protocol) o;
    return Objects.equals(this.id, protocol.id) &&
        Objects.equals(this.protocol, protocol.protocol) &&
        Objects.equals(this.dateTriggered, protocol.dateTriggered) &&
        Objects.equals(this.client, protocol.client) &&
        Objects.equals(this.vehicle, protocol.vehicle) &&
        Objects.equals(this.modals, protocol.modals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, protocol, dateTriggered, client, vehicle, modals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Protocol {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    dateTriggered: ").append(toIndentedString(dateTriggered)).append("\n");
    sb.append("    client: ").append(toIndentedString(client)).append("\n");
    sb.append("    vehicle: ").append(toIndentedString(vehicle)).append("\n");
    sb.append("    modals: ").append(toIndentedString(modals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("protocol");
    openapiFields.add("dateTriggered");
    openapiFields.add("client");
    openapiFields.add("vehicle");
    openapiFields.add("modals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Protocol
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (Protocol.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in Protocol is not found in the empty JSON string", Protocol.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Protocol.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Protocol` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `client`
      if (jsonObj.get("client") != null && !jsonObj.get("client").isJsonNull()) {
        Client.validateJsonObject(jsonObj.getAsJsonObject("client"));
      }
      // validate the optional field `vehicle`
      if (jsonObj.get("vehicle") != null && !jsonObj.get("vehicle").isJsonNull()) {
        Vehicle.validateJsonObject(jsonObj.getAsJsonObject("vehicle"));
      }
      if (jsonObj.get("modals") != null && !jsonObj.get("modals").isJsonNull()) {
        JsonArray jsonArraymodals = jsonObj.getAsJsonArray("modals");
        if (jsonArraymodals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("modals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `modals` to be an array in the JSON string but got `%s`", jsonObj.get("modals").toString()));
          }

          // validate the optional field `modals` (array)
          for (int i = 0; i < jsonArraymodals.size(); i++) {
            Modal.validateJsonObject(jsonArraymodals.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Protocol.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Protocol' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Protocol> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Protocol.class));

       return (TypeAdapter<T>) new TypeAdapter<Protocol>() {
           @Override
           public void write(JsonWriter out, Protocol value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Protocol read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Protocol given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Protocol
  * @throws IOException if the JSON string is invalid with respect to Protocol
  */
  public static Protocol fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Protocol.class);
  }

 /**
  * Convert an instance of Protocol to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

