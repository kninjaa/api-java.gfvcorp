/*
 * api_java_gfvcorp API
 * api_java_gfvcorp API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Client;
import org.openapitools.client.model.ResponseEntity;
import org.openapitools.client.model.RrequestClient;
import org.openapitools.client.model.RrequestModal;
import org.openapitools.client.model.RrequestProtocol;
import org.openapitools.client.model.RresponseClient;
import org.openapitools.client.model.RresponseVehicle;
import org.openapitools.client.model.RresquestVehicle;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * DELETE client/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delClientTest() throws ApiException {
        Integer id = null;
        ResponseEntity response = api.delClient(id);
        // TODO: test validations
    }

    /**
     * DELETE modal/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delModalTest() throws ApiException {
        Integer id = null;
        ResponseEntity response = api.delModal(id);
        // TODO: test validations
    }

    /**
     * DELETE protocol/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delProtocolTest() throws ApiException {
        Integer id = null;
        ResponseEntity response = api.delProtocol(id);
        // TODO: test validations
    }

    /**
     * DELETE vehicle/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void delVehicleTest() throws ApiException {
        Integer id = null;
        ResponseEntity response = api.delVehicle(id);
        // TODO: test validations
    }

    /**
     * GET brand/brands
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllBrandNamesTest() throws ApiException {
        ResponseEntity response = api.getAllBrandNames();
        // TODO: test validations
    }

    /**
     * GET brand
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllBrandsTest() throws ApiException {
        ResponseEntity response = api.getAllBrands();
        // TODO: test validations
    }

    /**
     * GET client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getClientTest() throws ApiException {
        String cpf = null;
        ResponseEntity response = api.getClient(cpf);
        // TODO: test validations
    }

    /**
     * GET modal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModalTest() throws ApiException {
        ResponseEntity response = api.getModal();
        // TODO: test validations
    }

    /**
     * GET modal/{protocol}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModalByProtocolIdTest() throws ApiException {
        Integer protocol = null;
        ResponseEntity response = api.getModalByProtocolId(protocol);
        // TODO: test validations
    }

    /**
     * GET modal/{id}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModalIdTest() throws ApiException {
        Integer id = null;
        ResponseEntity response = api.getModalId(id);
        // TODO: test validations
    }

    /**
     * GET brand/{brand}
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModelsByBrandTest() throws ApiException {
        String brand = null;
        ResponseEntity response = api.getModelsByBrand(brand);
        // TODO: test validations
    }

    /**
     * GET protocol
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProtocolTest() throws ApiException {
        ResponseEntity response = api.getProtocol();
        // TODO: test validations
    }

    /**
     * GET vehicle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVehicleTest() throws ApiException {
        Client client = null;
        ResponseEntity response = api.getVehicle(client);
        // TODO: test validations
    }

    /**
     * POST client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerClientTest() throws ApiException {
        RrequestClient rrequestClient = null;
        ResponseEntity response = api.registerClient(rrequestClient);
        // TODO: test validations
    }

    /**
     * POST modal
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerModalTest() throws ApiException {
        RrequestModal rrequestModal = null;
        ResponseEntity response = api.registerModal(rrequestModal);
        // TODO: test validations
    }

    /**
     * POST protocol
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerProtocolTest() throws ApiException {
        RrequestProtocol rrequestProtocol = null;
        ResponseEntity response = api.registerProtocol(rrequestProtocol);
        // TODO: test validations
    }

    /**
     * POST vehicle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerVehicleTest() throws ApiException {
        RresquestVehicle rresquestVehicle = null;
        Object response = api.registerVehicle(rresquestVehicle);
        // TODO: test validations
    }

    /**
     * PUT client
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateClientTest() throws ApiException {
        RresponseClient rresponseClient = null;
        ResponseEntity response = api.updateClient(rresponseClient);
        // TODO: test validations
    }

    /**
     * PUT vehicle
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateVehicleTest() throws ApiException {
        RresponseVehicle rresponseVehicle = null;
        String response = api.updateVehicle(rresponseVehicle);
        // TODO: test validations
    }

}
